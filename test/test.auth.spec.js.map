{"version":3,"sources":["test/test.auth.spec.ts"],"names":[],"mappings":";AAAA,qBAAqB,MAAM,CAAC,CAAA;AAC5B,wBAAgD,kBAAkB,CAAC,CAAA;AACnE,qBAAwE,eAAe,CAAC,CAAA;AACxF,qBAA6B,eAAe,CAAC,CAAA;AAG7C,IAAI,SAAS,GAAG,OAAO,CAAC;AAEb,uBAAe,GAAoB;IAC5C,SAAS,EAAE,KAAK;IAChB,QAAQ,EAAE,OAAO;IACjB,KAAK,EAAE,CAAC,SAAS,CAAC;CACnB,CAAC;AAMS,mBAAW,GAAG,IAAI,iBAAO,CAAe,cAAc,CAAC,CAAC;AAEnE,mBAAW,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;AAGrC,QAAQ,CAAC,gBAAgB,EAAE;IACzB,EAAE,CAAC,kCAAkC,EAAE,UAAC,IAAI;QAC1C,IAAI,GAAG,GAAG,IAAI,qBAAc,EAAE,CAAC;QAE/B,IAAI,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,oBAAa,CAAC,CAAC;QAC3D,IAAI,QAAQ,GAAG,mBAAW,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;QAEpD,kCAAwB,CAAC,EAAE,CAAC,GAAG,EAAE,UAAC,OAAkC,EAAE,OAAwB;YAC5F,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,oBAAa,CAAC,CAAC;YAC1C,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEzC,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE;QAC5B,IAAI,GAAG,GAAG,IAAI,qBAAc,EAAE,CAAC;QAE/B,IAAI,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,uBAAe,CAAC,CAAC;QAE7D,OAAO,CAAC,IAAI,CAAC,mBAAW,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"test/test.auth.spec.js","sourcesContent":["import {assert} from \"chai\";\nimport {Message, UnauthorizedErrorMessage} from \"./../lib/message\";\nimport {AnonymousAuth, IAuthentication, IUnauthorizedErrorMessage} from \"./../lib/auth\";\nimport {MessageHubMock} from \"./../lib/mock\";\nimport {IMessageContext} from \"../lib/context\";\n\nvar StaffRole = \"staff\";\n\nexport var StaffPermission: IAuthentication = {\n  anonymous: false,\n  username: \"staff\",\n  roles: [StaffRole]\n};\n\nexport interface ITestMessage {\n  data: string;\n}\n\nexport var TestMessage = new Message<ITestMessage>(\"test.message\");\n\nTestMessage.auth.roles = [StaffRole];\n\n\ndescribe('Auth Unit Test', () => {\n  it('Do not allow unauthorized access', (done) => {\n    var hub = new MessageHubMock();\n\n    var context = hub.getChildContext(hub, hub, AnonymousAuth);\n    var instance = TestMessage.create({ data: \"test\" });\n\n    UnauthorizedErrorMessage.on(hub, (message: IUnauthorizedErrorMessage, context: IMessageContext) => {\n      assert.equal(message.auth, AnonymousAuth);\n      assert.equal(message.instance, instance);\n\n      done();\n    });\n\n    context.emit(instance);\n  });\n\n  it('Allow authorized access', () => {\n    var hub = new MessageHubMock();\n\n    var context = hub.getChildContext(hub, hub, StaffPermission);\n\n    context.emit(TestMessage.create({ data: \"test\" }));\n  });\n});"],"sourceRoot":"/source/"}