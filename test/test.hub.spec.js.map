{"version":3,"sources":["test/test.hub.spec.ts"],"names":[],"mappings":";AAAA,qBAAqB,MAAM,CAAC,CAAA;AAC5B,oBAAyB,cAAc,CAAC,CAAA;AAExC,yBAA8B,iBAAiB,CAAC,CAAA;AAChD,qBAA4B,aAAa,CAAC,CAAA;AAE1C,QAAQ,CAAC,eAAe,EAAE;IACxB,EAAE,CAAC,aAAa,EAAE;QAChB,IAAI,GAAG,GAAG,IAAI,gBAAU,EAAE,CAAC;QAE3B,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,IAAI,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QAE5B,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAEnB,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE,UAAC,IAAI;QACpB,IAAI,GAAG,GAAG,IAAI,gBAAU,EAAE,CAAC;QAC3B,IAAI,OAAO,GAAG,cAAc,CAAC;QAC7B,IAAI,QAAQ,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QAEhC,GAAG,CAAC,GAAG,CAAC,UAAC,MAAkB;YACzB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,OAAY,EAAE,OAAwB;gBACxD,aAAM,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAEpC,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,IAAI,0BAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,oBAAa,CAAC,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,UAAC,IAAI;QACtC,IAAI,GAAG,GAAG,IAAI,gBAAU,EAAE,CAAC;QAE3B,GAAG,CAAC,EAAE,CAAC,eAAe,EAAE;YACtB,aAAM,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,eAAe,EAAE;YACtB,aAAM,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,eAAe,EAAE;YACtB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,IAAI,0BAAe,CAAC,eAAe,EAAE,EAAE,EAAE,oBAAa,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,wBAAwB,EAAE,UAAC,IAAI;QAChC,IAAI,GAAG,GAAG,IAAI,gBAAU,EAAE,CAAC;QAE3B,IAAI,GAAG,GAAG,cAAc,CAAC;QACzB,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,QAAQ,GAAG,UAAC,OAAY,EAAE,OAAwB;YACpD,KAAK,EAAE,CAAC;YAER,EAAE,CAAA,CAAC,KAAK,GAAG,CAAC,CAAC;gBACX,IAAI,EAAE,CAAC;QACX,CAAC,CAAC;QAEF,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACtB,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAEtB,GAAG,CAAC,IAAI,CAAC,IAAI,0BAAe,CAAC,GAAG,EAAE,EAAE,EAAE,oBAAa,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"test/test.hub.spec.js","sourcesContent":["import {assert} from \"chai\";\nimport {MessageHub} from \"./../lib/hub\";\nimport {IMessageContext} from \"../lib/context\";\nimport {MessageInstance} from \"../lib/instance\";\nimport {AnonymousAuth} from \"../lib/auth\";\n\ndescribe('Hub Unit Test', () => {\n  it('Get and Set', () => {\n    var hub = new MessageHub();\n\n    var key = \"key\";\n    var data = { test: \"data\" };\n\n    hub.set(key, data);\n\n    assert.deepEqual(hub.get(key), data);\n  });\n\n  it('Use Module', (done) => {\n    var hub = new MessageHub();\n    var testKey = \"test.message\";\n    var testData = { test: \"data\" };\n\n    hub.use((module: MessageHub) => {\n      module.on(testKey, (message: any, context: IMessageContext) => {\n        assert.deepEqual(message, testData);\n\n        done();\n      });\n    });\n\n    hub.emit(new MessageInstance(testKey, testData, AnonymousAuth));\n  });\n\n  it('Emits only matched callbacks', (done) => {\n    var hub = new MessageHub();\n\n    hub.on(\"test1.message\", () => {\n      assert.fail();\n    });\n\n    hub.on(\"test2.message\", () => {\n      assert.fail();\n    });\n\n    hub.on(\"test3.message\", () => {\n      done();\n    });\n\n    hub.emit(new MessageInstance(\"test3.message\", {}, AnonymousAuth));\n  });\n\n\n  it('Emit multiple emitters', (done) => {\n    var hub = new MessageHub();\n\n    var key = \"test.message\";\n    var count = 0;\n\n    var callback = (message: any, context: IMessageContext) => {\n      count++;\n\n      if(count > 1)\n        done();\n    };\n\n    hub.on(key, callback);\n    hub.on(key, callback);\n\n    hub.emit(new MessageInstance(key, {}, AnonymousAuth));\n  });\n});"],"sourceRoot":"/source/"}