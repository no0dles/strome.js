{"version":3,"sources":["test/test.context.spec.ts"],"names":[],"mappings":";AAAA,qBAA4B,eAAe,CAAC,CAAA;AAC5C,yBAA8B,mBAAmB,CAAC,CAAA;AAClD,qBAAqB,MAAM,CAAC,CAAA;AAE5B,oBAAyB,cAAc,CAAC,CAAA;AACxC,qBAAiC,eAAe,CAAC,CAAA;AAEjD,QAAQ,CAAC,mBAAmB,EAAE;IAC5B,EAAE,CAAC,6CAA6C,EAAE,UAAC,IAAI;QACrD,IAAI,OAAO,GAAG,IAAI,yBAAkB,EAAE,CAAC;QAEvC,IAAI,UAAU,GAAG,cAAc,CAAC;QAChC,IAAI,WAAW,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QACnC,IAAI,eAAe,GAAG,IAAI,0BAAe,CAAC,UAAU,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;QAElF,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,OAAY,EAAE,OAAwB;YAC5D,aAAM,CAAC,SAAS,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAEvC,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,IAAI,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,EAAE,oBAAa,CAAC,CAAC;QAE5E,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,UAAC,IAAI;QAC1C,IAAI,OAAO,GAAG,IAAI,yBAAkB,EAAE,CAAC;QACvC,IAAI,GAAG,GAAG,IAAI,gBAAU,EAAE,CAAC;QAE3B,IAAI,UAAU,GAAG,cAAc,CAAC;QAChC,IAAI,WAAW,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QACnC,IAAI,eAAe,GAAG,IAAI,0BAAe,CAAC,UAAU,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;QAElF,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,OAAY,EAAE,OAAwB;YACxD,aAAM,CAAC,SAAS,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAEvC,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,IAAI,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,oBAAa,CAAC,CAAC;QAExE,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE;QAChB,IAAI,OAAO,GAAG,IAAI,yBAAkB,EAAE,CAAC;QACvC,IAAI,GAAG,GAAG,IAAI,gBAAU,EAAE,CAAC;QAE3B,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,oBAAa,CAAC,CAAC;QACvE,IAAI,GAAG,GAAG,MAAM,CAAC;QACjB,IAAI,KAAK,GAAG,MAAM,CAAC;QAEnB,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAE5B,aAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"test/test.context.spec.js","sourcesContent":["import {AnonymousAuth} from \"./../lib/auth\";\nimport {MessageInstance} from \"./../lib/instance\";\nimport {assert} from \"chai\";\nimport {IMessageContext} from \"./../lib/context\";\nimport {MessageHub} from \"./../lib/hub\";\nimport {MessageContextMock} from \"./../lib/mock\";\n\ndescribe('Context Unit Test', () => {\n  it('Message should be emitted on parent context', (done) => {\n    var context = new MessageContextMock();\n\n    var messageKey = \"test.message\";\n    var messageData = { test: \"data\" };\n    var messageInstance = new MessageInstance(messageKey, messageData, { roles: [] });\n\n    context.on(messageKey, (message: any, context: IMessageContext) => {\n      assert.deepEqual(message, messageData);\n\n      done();\n    });\n\n    var childContext = context.getChildContext(context, context, AnonymousAuth);\n\n    childContext.emit(messageInstance);\n  });\n\n  it('Message should be emitted on hub', (done) => {\n    var context = new MessageContextMock();\n    var hub = new MessageHub();\n\n    var messageKey = \"test.message\";\n    var messageData = { test: \"data\" };\n    var messageInstance = new MessageInstance(messageKey, messageData, { roles: [] });\n\n    hub.on(messageKey, (message: any, context: IMessageContext) => {\n      assert.deepEqual(message, messageData);\n\n      done();\n    });\n\n    var childContext = context.getChildContext(hub, context, AnonymousAuth);\n\n    childContext.emit(messageInstance);\n  });\n\n  it('Get and Set', () => {\n    var context = new MessageContextMock();\n    var hub = new MessageHub();\n\n    var testContext = context.getChildContext(hub, context, AnonymousAuth);\n    var key = \"test\";\n    var value = \"data\";\n\n    testContext.set(key, value);\n\n    assert.equal(testContext.get(key), value);\n  });\n});"],"sourceRoot":"/source/"}